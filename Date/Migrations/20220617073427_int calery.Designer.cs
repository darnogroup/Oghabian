// <auto-generated />
using System;
using Date.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Date.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20220617073427_int calery")]
    partial class intcalery
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("BF")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domin.Entities.AddressEntity", b =>
                {
                    b.Property<string>("AddressId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AddressId");

                    b.HasIndex("CityId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Domin.Entities.AdsEntity", b =>
                {
                    b.Property<string>("AdsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageHomeOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageHomeOneAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageHomeOneLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageHomeThree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageHomeThreeAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageHomeThreeLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageHomeTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageHomeTwoAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageHomeTwoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageOneAlt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageOneLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageSidebar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageSidebarAlt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageSidebarLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageTwo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageTwoAlt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageTwoLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdsId");

                    b.ToTable("Ads");
                });

            modelBuilder.Entity("Domin.Entities.ArticleEntity", b =>
                {
                    b.Property<string>("ArticleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ArticleBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeStudy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitCount")
                        .HasColumnType("int");

                    b.HasKey("ArticleId");

                    b.HasIndex("ArticleTitle");

                    b.HasIndex("CategoryId");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("Domin.Entities.ArticleSeoEntity", b =>
                {
                    b.Property<int>("SeoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArticleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraphDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraphImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraphSiteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraphTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraphType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraphUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeoId");

                    b.HasIndex("ArticleId")
                        .IsUnique()
                        .HasFilter("[ArticleId] IS NOT NULL");

                    b.ToTable("ArticleSeo");
                });

            modelBuilder.Entity("Domin.Entities.CategoryEntity", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Domin.Entities.ChatEntity", b =>
                {
                    b.Property<string>("ChatId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConnectionClient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatId");

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("Domin.Entities.ChatMessageEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.ToTable("ChatMessage");
                });

            modelBuilder.Entity("Domin.Entities.CityEntity", b =>
                {
                    b.Property<string>("CityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Domin.Entities.ColumnEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Columns")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RowId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RowId");

                    b.ToTable("Column");
                });

            modelBuilder.Entity("Domin.Entities.CommentArticleEntity", b =>
                {
                    b.Property<string>("CommentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ArticleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Show")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CommentId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentArticle");
                });

            modelBuilder.Entity("Domin.Entities.CommentFoodEntity", b =>
                {
                    b.Property<string>("CommentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Show")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CommentId");

                    b.HasIndex("FoodId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentFood");
                });

            modelBuilder.Entity("Domin.Entities.ContactEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Domin.Entities.FavoriteEntity", b =>
                {
                    b.Property<string>("FavoriteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FoodId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FavoriteId");

                    b.HasIndex("FoodId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorite");
                });

            modelBuilder.Entity("Domin.Entities.FoodEntity", b =>
                {
                    b.Property<string>("FoodId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FoodCalories")
                        .HasColumnType("int");

                    b.Property<string>("FoodCarbohydrate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodCount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FoodDiscountPrice")
                        .HasColumnType("int");

                    b.Property<string>("FoodFat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FoodPrice")
                        .HasColumnType("int");

                    b.Property<string>("FoodProtein")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodSummary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodTags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MealId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("SicknessId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("FoodId");

                    b.HasIndex("MealId");

                    b.HasIndex("SicknessId");

                    b.ToTable("Food");
                });

            modelBuilder.Entity("Domin.Entities.FoodSeoEntity", b =>
                {
                    b.Property<int>("SeoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GraphDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraphImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraphSiteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraphTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraphType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraphUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeoId");

                    b.HasIndex("FoodId")
                        .IsUnique()
                        .HasFilter("[FoodId] IS NOT NULL");

                    b.ToTable("FoodSeo");
                });

            modelBuilder.Entity("Domin.Entities.GalleryEntity", b =>
                {
                    b.Property<string>("ImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FoodId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId");

                    b.HasIndex("FoodId");

                    b.ToTable("Gallery");
                });

            modelBuilder.Entity("Domin.Entities.MailEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Mail");
                });

            modelBuilder.Entity("Domin.Entities.MealEntity", b =>
                {
                    b.Property<string>("MealId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MealTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MealId");

                    b.ToTable("Meal");
                });

            modelBuilder.Entity("Domin.Entities.MedicalInformationEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MedicalRecords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SicknessId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserAge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCalories")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCarbohydrate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserFat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserGender")
                        .HasColumnType("int");

                    b.Property<string>("UserHeight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserProtein")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserWeight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SicknessId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("MedicalInformation");
                });

            modelBuilder.Entity("Domin.Entities.MessageEntity", b =>
                {
                    b.Property<string>("MessageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MessageBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageSender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Domin.Entities.OrderDetailEntity", b =>
                {
                    b.Property<string>("OrderDetailId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("FoodId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("FoodId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("Domin.Entities.OrderEntity", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Close")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Condition")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Domin.Entities.PropertyEntity", b =>
                {
                    b.Property<string>("PropertyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FoodId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PropertyTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropertyId");

                    b.HasIndex("FoodId");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("Domin.Entities.QuestionEntity", b =>
                {
                    b.Property<string>("QuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuestionAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("Domin.Entities.RowEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rows")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Row");
                });

            modelBuilder.Entity("Domin.Entities.SeoEntity", b =>
                {
                    b.Property<int>("SeoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Footer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraphDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraphImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraphSiteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraphTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraphType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraphUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeoId");

                    b.ToTable("Seo");
                });

            modelBuilder.Entity("Domin.Entities.SettingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApiNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApiSms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaceBook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Law")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Linkdin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SendPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleSite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsApp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("Domin.Entities.SicknessEntity", b =>
                {
                    b.Property<string>("SicknessId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SicknessImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SicknessTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SicknessId");

                    b.ToTable("Sickness");
                });

            modelBuilder.Entity("Domin.Entities.SliderEntity", b =>
                {
                    b.Property<string>("SliderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SliderAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SliderImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SliderId");

                    b.ToTable("Slider");
                });

            modelBuilder.Entity("Domin.Entities.StateEntity", b =>
                {
                    b.Property<string>("StateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StateId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("Domin.Entities.SupporterEntity", b =>
                {
                    b.Property<string>("SupporterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SupporterActivity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupporterAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupporterDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupporterImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupporterMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupporterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupporterNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupporterId");

                    b.ToTable("Supporter");
                });

            modelBuilder.Entity("Domin.Entities.TicketDetailEntity", b =>
                {
                    b.Property<string>("TicketDetailId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketDetailId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketDetail");
                });

            modelBuilder.Entity("Domin.Entities.TicketEntity", b =>
                {
                    b.Property<string>("TicketId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TicketTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("Domin.Entities.UserAnswerEntity", b =>
                {
                    b.Property<string>("UserAnswerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAnswerBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserAnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAnswer");
                });

            modelBuilder.Entity("Domin.Entities.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LoginCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoginKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MedicalRecords")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserAvatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Domin.Entities.UserQuestionEntity", b =>
                {
                    b.Property<string>("UserQuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Accept")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserQuestionBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserQuestionTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserQuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserQuestion");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domin.Entities.AddressEntity", b =>
                {
                    b.HasOne("Domin.Entities.CityEntity", "City")
                        .WithMany("Address")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domin.Entities.StateEntity", "State")
                        .WithMany("Address")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domin.Entities.UserEntity", "User")
                        .WithOne("Address")
                        .HasForeignKey("Domin.Entities.AddressEntity", "UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("City");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domin.Entities.ArticleEntity", b =>
                {
                    b.HasOne("Domin.Entities.CategoryEntity", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domin.Entities.ArticleSeoEntity", b =>
                {
                    b.HasOne("Domin.Entities.ArticleEntity", "Article")
                        .WithOne("Seo")
                        .HasForeignKey("Domin.Entities.ArticleSeoEntity", "ArticleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Article");
                });

            modelBuilder.Entity("Domin.Entities.ChatMessageEntity", b =>
                {
                    b.HasOne("Domin.Entities.ChatEntity", "Chat")
                        .WithMany("Message")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Domin.Entities.CityEntity", b =>
                {
                    b.HasOne("Domin.Entities.StateEntity", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("State");
                });

            modelBuilder.Entity("Domin.Entities.ColumnEntity", b =>
                {
                    b.HasOne("Domin.Entities.RowEntity", "Row")
                        .WithMany("Columns")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Row");
                });

            modelBuilder.Entity("Domin.Entities.CommentArticleEntity", b =>
                {
                    b.HasOne("Domin.Entities.ArticleEntity", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domin.Entities.UserEntity", "User")
                        .WithMany("CommentArticle")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domin.Entities.CommentFoodEntity", b =>
                {
                    b.HasOne("Domin.Entities.FoodEntity", "Food")
                        .WithMany("Comment")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domin.Entities.UserEntity", "User")
                        .WithMany("CommentFood")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Food");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domin.Entities.FavoriteEntity", b =>
                {
                    b.HasOne("Domin.Entities.FoodEntity", "Food")
                        .WithMany("Favorite")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domin.Entities.UserEntity", "User")
                        .WithMany("Favorite")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Food");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domin.Entities.FoodEntity", b =>
                {
                    b.HasOne("Domin.Entities.MealEntity", "Meal")
                        .WithMany("Food")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domin.Entities.SicknessEntity", "Sickness")
                        .WithMany("Food")
                        .HasForeignKey("SicknessId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Meal");

                    b.Navigation("Sickness");
                });

            modelBuilder.Entity("Domin.Entities.FoodSeoEntity", b =>
                {
                    b.HasOne("Domin.Entities.FoodEntity", "Food")
                        .WithOne("Seo")
                        .HasForeignKey("Domin.Entities.FoodSeoEntity", "FoodId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Food");
                });

            modelBuilder.Entity("Domin.Entities.GalleryEntity", b =>
                {
                    b.HasOne("Domin.Entities.FoodEntity", "Food")
                        .WithMany("Gallery")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Food");
                });

            modelBuilder.Entity("Domin.Entities.MedicalInformationEntity", b =>
                {
                    b.HasOne("Domin.Entities.SicknessEntity", "Sickness")
                        .WithMany("MedicalInformation")
                        .HasForeignKey("SicknessId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domin.Entities.UserEntity", "User")
                        .WithOne("MedicalInformation")
                        .HasForeignKey("Domin.Entities.MedicalInformationEntity", "UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Sickness");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domin.Entities.OrderDetailEntity", b =>
                {
                    b.HasOne("Domin.Entities.FoodEntity", "Food")
                        .WithMany("OrderDetail")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domin.Entities.OrderEntity", "Order")
                        .WithMany("Detail")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Food");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domin.Entities.OrderEntity", b =>
                {
                    b.HasOne("Domin.Entities.UserEntity", "User")
                        .WithMany("Order")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domin.Entities.PropertyEntity", b =>
                {
                    b.HasOne("Domin.Entities.FoodEntity", "Food")
                        .WithMany("Properties")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Food");
                });

            modelBuilder.Entity("Domin.Entities.TicketDetailEntity", b =>
                {
                    b.HasOne("Domin.Entities.TicketEntity", "Ticket")
                        .WithMany("Ticket")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domin.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domin.Entities.TicketEntity", b =>
                {
                    b.HasOne("Domin.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domin.Entities.UserAnswerEntity", b =>
                {
                    b.HasOne("Domin.Entities.UserQuestionEntity", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domin.Entities.UserEntity", "User")
                        .WithMany("UserAnswer")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domin.Entities.UserQuestionEntity", b =>
                {
                    b.HasOne("Domin.Entities.UserEntity", "User")
                        .WithMany("UserQuestion")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domin.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domin.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domin.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domin.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domin.Entities.ArticleEntity", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Seo");
                });

            modelBuilder.Entity("Domin.Entities.CategoryEntity", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("Domin.Entities.ChatEntity", b =>
                {
                    b.Navigation("Message");
                });

            modelBuilder.Entity("Domin.Entities.CityEntity", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("Domin.Entities.FoodEntity", b =>
                {
                    b.Navigation("Comment");

                    b.Navigation("Favorite");

                    b.Navigation("Gallery");

                    b.Navigation("OrderDetail");

                    b.Navigation("Properties");

                    b.Navigation("Seo");
                });

            modelBuilder.Entity("Domin.Entities.MealEntity", b =>
                {
                    b.Navigation("Food");
                });

            modelBuilder.Entity("Domin.Entities.OrderEntity", b =>
                {
                    b.Navigation("Detail");
                });

            modelBuilder.Entity("Domin.Entities.RowEntity", b =>
                {
                    b.Navigation("Columns");
                });

            modelBuilder.Entity("Domin.Entities.SicknessEntity", b =>
                {
                    b.Navigation("Food");

                    b.Navigation("MedicalInformation");
                });

            modelBuilder.Entity("Domin.Entities.StateEntity", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Domin.Entities.TicketEntity", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Domin.Entities.UserEntity", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("CommentArticle");

                    b.Navigation("CommentFood");

                    b.Navigation("Favorite");

                    b.Navigation("MedicalInformation");

                    b.Navigation("Order");

                    b.Navigation("UserAnswer");

                    b.Navigation("UserQuestion");
                });

            modelBuilder.Entity("Domin.Entities.UserQuestionEntity", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
